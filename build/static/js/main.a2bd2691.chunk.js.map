{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","randomBetween","style","right","window","innerWidth","top","innerHeight","transform","concat","x","y","pixels","Math","ceil","random","textArea","_newText","focus","select","nextProps","nextState","children","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","id","gi","onClick","fa","Component","Board","notes","add","eachNote","update","nextId","self","count","fetch","then","response","json","split","forEach","sentence","substring","text","prevState","toConsumableArray","note","uniqueId","newText","i","console","log","map","objectSpread","filter","src_Note","key","_this3","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2bd2691.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {FaPencilAlt} from 'react-icons/fa'\nimport {FaTrash} from 'react-icons/fa'\nimport {GiCompactDisc} from 'react-icons/gi'\n\nclass Note extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      editing: false\n    }\n    this.edit = this.edit.bind(this)\n    this.remove = this.remove.bind(this)\n    this.save = this.save.bind(this)\n    this.renderForm = this.renderForm.bind(this)\n    this.renderDisplay = this.renderDisplay.bind(this)\n    this.randomBetween = this.randomBetween.bind(this)\n  }\n\n  componentWillMount(){\n    this.style = {\n      right: this.randomBetween(0, window.innerWidth - 150, 'px'),\n      top: this.randomBetween(0, window.innerHeight - 150, 'px'),\n      transform: `rotate(${this.randomBetween(-25, 25, 'deg')})`\n    }\n  }\n\n  randomBetween(x, y, pixels){\n    return x + Math.ceil(Math.random() * (y-x)) + pixels\n  }\n\n  componentDidUpdate(){\n    var textArea\n    if (this.state.editing){\n      textArea = this._newText\n      textArea.focus()\n      textArea.select()\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState){\n    return(\n      this.props.children !== nextProps.children || this.state !== nextState\n    )\n  }\n\n  edit(){\n    this.setState({\n      editing:true\n    })\n  }\n\n  remove(){\n    this.props.onRemove(this.props.index)\n  }\n\n  save(e){\n    e.preventDefault()\n    this.props.onChange(this._newText.value, this.props.index)\n    this.setState({\n      editing: false\n    })\n  }\n\n  renderForm(){\n    return(\n      <div className=\"note\" style={this.style}>\n        <form onSubmit={this.save}>\n          <textarea ref={input => this._newText = input}\n                    defaultValue={this.props.children}/>\n          <button id=\"save\"><GiCompactDisc /></button>\n        </form>\n      </div>\n    )\n  }\n\n  renderDisplay(){\n    return(\n      <div className=\"note\" style={this.style}>\n        <p>{this.props.children}</p>\n        <span>\n          <button onClick={this.edit} id=\"edit\"><FaPencilAlt /></button>\n          <button onClick={this.remove} id=\"remove\"><FaTrash /></button>\n        </span>\n      </div>\n    )\n  }\n\n  render(){\n    return this.state.editing ? this.renderForm() : this.renderDisplay()\n  }\n}\n\nexport default Note\n","import React, {Component} from 'react'\nimport Note from './Note'\nimport {FaPlus} from 'react-icons/fa'\n\nclass Board extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      notes: []\n    }\n    this.add = this.add.bind(this)\n    this.eachNote = this.eachNote.bind(this)\n    this.update = this.update.bind(this)\n    this.remove = this.remove.bind(this)\n    this.nextId = this.nextId.bind(this)\n  }\n\n  componentWillMount(){\n    var self = this\n    if (this.props.count){\n      fetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n            .then(response => response.json())\n            .then(json => json[0]\n                            .split('. ')\n                            .forEach(sentence => self.add(sentence.substring(0, 25))))\n    }\n  }\n\n  add(text){\n    this.setState(prevState =>({\n      notes: [\n        ...prevState.notes,\n        {\n          id: this.nextId(),\n          note: text\n        }\n      ]\n    }))\n  }\n\n  nextId(){\n    this.uniqueId = this.uniqueId || 0\n    return this.uniqueId++\n  }\n\n  update(newText, i){\n    console.log('updating item at index', i, newText)\n    this.setState(prevState => ({\n      notes: prevState.notes.map(\n        note => (note.id !== i) ? note : {...note, note: newText}\n      )\n    }))\n  }\n\n  remove(id){\n    console.log('removing item at', id)\n    this.setState(prevState => ({\n      notes: prevState.notes.filter(note => note.id !== id)\n    }))\n  }\n\n  eachNote(note,i){\n    return (\n      <Note key={note.id}\n            index={note.id}\n            onChange={this.update}\n            onRemove={this.remove}>\n        {note.note}\n      </Note>\n\n    )\n  }\n\n  render(){\n    return(\n      <div className=\"board\">\n        {this.state.notes.map(this.eachNote)}\n        <button onClick={() => this.add(\"New Note\")}\n                id=\"add\">\n            <FaPlus />\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Board\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Board from './Board'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Board count={50}/>, document.getElementById('root'))\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}